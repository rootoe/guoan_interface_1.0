<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.guoan.dao.shequ.OrderGoodsMapper" >
  <resultMap id="BaseResultMap" type="com.guoan.entity.shequ.bo.OrderGoods" >
    <id column="order_id" property="orderId" jdbcType="VARCHAR" />
    <id column="goods_id" property="goodsId" jdbcType="VARCHAR" />
    <result column="unit_price" property="unitPrice" jdbcType="DOUBLE" />
    <result column="amount" property="amount" jdbcType="INTEGER" />
    <result column="total_price" property="totalPrice" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    order_id, goods_id, unit_price, amount, total_price
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.guoan.entity.shequ.bo.OrderGoodsCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_order_shop_goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.guoan.entity.shequ.bo.OrderGoodsKey" >
    select 
    <include refid="Base_Column_List" />
    from t_order_shop_goods
    where order_id = #{orderId,jdbcType=VARCHAR}
      and goods_id = #{goodsId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.guoan.entity.shequ.bo.OrderGoodsKey" >
    delete from t_order_shop_goods
    where order_id = #{orderId,jdbcType=VARCHAR}
      and goods_id = #{goodsId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.guoan.entity.shequ.bo.OrderGoodsCriteria" >
    delete from t_order_shop_goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guoan.entity.shequ.bo.OrderGoods" >
    insert into t_order_shop_goods (order_id, goods_id, unit_price, 
      amount, total_price)
    values (#{orderId,jdbcType=VARCHAR}, #{goodsId,jdbcType=VARCHAR}, #{unitPrice,jdbcType=DOUBLE}, 
      #{amount,jdbcType=INTEGER}, #{totalPrice,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.guoan.entity.shequ.bo.OrderGoods" >
    insert into t_order_shop_goods
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="goodsId != null" >
        goods_id,
      </if>
      <if test="unitPrice != null" >
        unit_price,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="totalPrice != null" >
        total_price,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="goodsId != null" >
        #{goodsId,jdbcType=VARCHAR},
      </if>
      <if test="unitPrice != null" >
        #{unitPrice,jdbcType=DOUBLE},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.guoan.entity.shequ.bo.OrderGoodsCriteria" resultType="java.lang.Integer" >
    select count(*) from t_order_shop_goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_order_shop_goods
    <set >
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsId != null" >
        goods_id = #{record.goodsId,jdbcType=VARCHAR},
      </if>
      <if test="record.unitPrice != null" >
        unit_price = #{record.unitPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=INTEGER},
      </if>
      <if test="record.totalPrice != null" >
        total_price = #{record.totalPrice,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_order_shop_goods
    set order_id = #{record.orderId,jdbcType=VARCHAR},
      goods_id = #{record.goodsId,jdbcType=VARCHAR},
      unit_price = #{record.unitPrice,jdbcType=DOUBLE},
      amount = #{record.amount,jdbcType=INTEGER},
      total_price = #{record.totalPrice,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.guoan.entity.shequ.bo.OrderGoods" >
    update t_order_shop_goods
    <set >
      <if test="unitPrice != null" >
        unit_price = #{unitPrice,jdbcType=DOUBLE},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        total_price = #{totalPrice,jdbcType=DOUBLE},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=VARCHAR}
      and goods_id = #{goodsId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guoan.entity.shequ.bo.OrderGoods" >
    update t_order_shop_goods
    set unit_price = #{unitPrice,jdbcType=DOUBLE},
      amount = #{amount,jdbcType=INTEGER},
      total_price = #{totalPrice,jdbcType=DOUBLE}
    where order_id = #{orderId,jdbcType=VARCHAR}
      and goods_id = #{goodsId,jdbcType=VARCHAR}
  </update>

  <!-- 更新开始 -->

  <resultMap id="OrderMap" type="com.guoan.entity.shequ.bo.OrderWash" >

    <id column="wash_id" property="washId" jdbcType="VARCHAR" />
    <result column="order_quantity" property="orderQuantity" jdbcType="INTEGER" />
    <result column="wash_order" property="washOrder" jdbcType="VARCHAR" />
    <result column="provider_id" property="providerId" jdbcType="INTEGER" />
    <result column="provider_name" property="providerName" jdbcType="VARCHAR" />

    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="order_sn" property="orderSn" jdbcType="VARCHAR" />
    <result column="order_telephone" property="orderTelephone" jdbcType="VARCHAR" />
    <result column="order_contact" property="orderContact" jdbcType="VARCHAR" />
    <result column="order_address" property="orderAddress" jdbcType="VARCHAR" />
    <result column="order_remark" property="orderRemark" jdbcType="VARCHAR" />
    <result column="appointment_begin_time" property="appointmentBeginTime" jdbcType="TIMESTAMP" />
    <result column="appointment_end_time" property="appointmentEndTime" jdbcType="TIMESTAMP" />
    <result column="order_type" property="orderType" jdbcType="INTEGER" />
    <result column="service_user_id" property="serviceUserId" jdbcType="VARCHAR" />
    <result column="service_telephone" property="serviceTelephone" jdbcType="VARCHAR" />
    <result column="service_contact" property="serviceContact" jdbcType="VARCHAR" />
    <result column="service_type" property="serviceType" jdbcType="VARCHAR" />
    <result column="service_remark" property="serviceRemark" jdbcType="VARCHAR" />
    <result column="order_amount" property="orderAmount" jdbcType="DOUBLE" />
    <result column="order_reduce" property="orderReduce" jdbcType="DOUBLE" />
    <result column="order_paid" property="orderPaid" jdbcType="DOUBLE" />
    <result column="order_status" property="orderStatus" jdbcType="INTEGER" />
    <result column="flow_status" property="flowStatus" jdbcType="INTEGER" />
    <result column="flow_status_name" property="flowStatusName" jdbcType="VARCHAR" />
    <result column="is_evaluation" property="isEvaluation" jdbcType="INTEGER" />
    <result column="evaluation_attitude" property="evaluationAttitude" jdbcType="INTEGER" />
    <result column="evaluation_quality" property="evaluationQuality" jdbcType="INTEGER" />
    <result column="evaluation_remark" property="evaluationRemark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="payment_type" property="paymentType" jdbcType="INTEGER" />
    <result column="payment_type_name" property="paymentTypeName" jdbcType="VARCHAR" />
    <result column="is_cancel" property="isCancel" jdbcType="INTEGER" />
    <result column="cancel_remark" property="cancelRemark" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
  </resultMap>

  <select id="getOrderList" parameterType="map"  resultMap="OrderMap" >
    select o.* from t_order o
    <include refid="Select_Order_List_Where_Clause" />

    <if test="record.orderByClause != null" >
      order by ${record.orderByClause}
    </if>
    <if test="record.limitStart != null and record.limitStart>=0" >
      limit #{record.limitStart} , #{record.limitEnd}
    </if>
  </select>

  <select id="getOrderListCount" resultType="java.lang.Integer"  parameterType="map" >
    select count(*) from t_order o
    <include refid="Select_Order_List_Where_Clause" />
  </select>

  <sql id="Select_Order_List_Where_Clause" >
    <where>
      and o.order_status = #{record.orderStatus, jdbcType=INTEGER}
      <if test="record.userId != null" >
        and o.user_id = #{record.userId, jdbcType=VARCHAR}
      </if>
      <if test="record.serviceType != null" >
        and o.service_type = #{record.serviceType, jdbcType=VARCHAR}
      </if>
      <if test="record.serviceUserId != null" >
        and o.service_user_id = #{record.serviceUserId, jdbcType=VARCHAR}
      </if>
      <if test="record.flowStatusList != null" >
        and o.flow_status in
        <foreach collection="record.flowStatusList" item="status" open="(" close=")" separator="," >
          #{status}
        </foreach>
      </if>
    </where>
  </sql>

</mapper>